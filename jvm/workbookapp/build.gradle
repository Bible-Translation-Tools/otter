import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'nu.studer.jooq' version "$jooqPluginVer"
    id 'org.openjfx.javafxplugin' version "$javafxPluginVer"
    id "com.install4j.gradle" version "$install4jPluginVer"
    id 'com.github.johnrengelman.shadow' version "$shadowPluginVer"
    id 'com.gluonhq.gluonfx-gradle-plugin' version '1.0.1'
}

apply plugin: 'application'
apply plugin: 'idea'

javafx {
    version = "$javafxVer"
    modules = ['javafx.base', 'javafx.graphics', 'javafx.controls', 'javafx.fxml']
}

repositories {
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } // TornadoFX 2.0 Snapshot
    maven { url 'https://jitpack.io' }
}

sourceSets {
    assets {
        resources {
            srcDir "${project(':assets').projectDir}/src/main/resource"
        }
    }
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
        resources {
            srcDirs += [file('src/integration-test/resources'), assets.resources]
        }
    }
    main {
        resources {
            srcDirs += [assets.resources]
        }
    }
    test {
        resources {
            srcDirs += [assets.resources]
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom main
    integrationTestRuntime.extendsFrom main
}

application {
    mainClassName = "org.wycliffeassociates.otter.jvm.workbookapp.MainKt"
}

apply from: './jooq.gradle'

//install4j tasks for building win/nix/mac installers. Executable jar can be built without it
install4j {
    vmParameters = ["-Dinstall4j.timestampUrl=http://timestamp.sectigo.com/"]
    //pass in the install4j directory via -P if it's not in the default install location, e.q. for use with travis or arbitrary paths
    if (project.hasProperty('gradlewInstall4jDirectory')) {
        installDir = file(gradlewInstall4jDirectory)
    }
    //license must be passed via gradlew commandline -P as it can't be commit to public source control
    if (project.hasProperty('gradlewCommandLicenseProp')) {
        license = gradlewCommandLicenseProp
    }
    //gradle command Property for the code signing cert password
    if (project.hasProperty('gradlewwinKeystorePassword')) {
        winKeystorePassword = gradlewwinKeystorePassword
    }
}

task install4jdeploy(type: com.install4j.gradle.Install4jTask) {
    projectFile = 'otter.install4j'
    //Pass Travis Build ID to install4j for versioning
    if (project.hasProperty('gradlewCommandVersionProp')) {
        release = gradlewCommandVersionProp
    }
}

dependencies {
    // ReactiveX
    implementation "io.reactivex.rxjava2:rxkotlin:$rxkotlinVer"
    implementation "com.github.thomasnield:rxkotlinfx:$rxkotlinfxVer"
    implementation "com.jakewharton.rxrelay2:rxrelay:$rxrelayVer"

    // TornadoFX
    implementation "no.tornado:tornadofx:$tornadofxVer"

    //OpenJFX cross-platform fat jar dependencies
    runtimeOnly "org.openjfx:javafx-graphics:$javafxVer:win"
    runtimeOnly "org.openjfx:javafx-graphics:$javafxVer:linux"
    runtimeOnly "org.openjfx:javafx-graphics:$javafxVer:mac"

    // SVG Loader
    implementation "com.github.jsarabia:FranzXaverSVG:$franzXaverSvgVer"

    // JFoenix
    implementation "com.jfoenix:jfoenix:$jfoenixVer"

    // ControlsFX
    implementation 'com.github.jsarabia:javafx-gridview:-SNAPSHOT'
    implementation "org.controlsfx:controlsfx:$controlsfxVer"

    // FontAwesomeFX
    implementation "de.jensd:fontawesomefx-commons:$fontawesomeCommonsVer"
    implementation "de.jensd:fontawesomefx-materialicons:$fontawesomeMaterialIconsVer"
    implementation "de.jensd:fontawesomefx-icons525:$fontawesomeIcons525Ver"
    implementation "de.jensd:fontawesomefx-materialdesignfont:$fontawesomeMaterialFontVer"

    // Ikonli
    implementation "org.kordamp.ikonli:ikonli-javafx:$ikonliVer"
    implementation "org.kordamp.ikonli:ikonli-fontawesome-pack:$ikonliVer"
    implementation "org.kordamp.ikonli:ikonli-fontawesome5-pack:$ikonliVer"
    implementation "org.kordamp.ikonli:ikonli-materialdesign-pack:$ikonliVer"
    implementation "org.kordamp.ikonli:ikonli-material-pack:$ikonliVer"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitVer"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitMoshiVer"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitRxJava2Ver"

    // Jackson YAML
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVer"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVer"

    //Dagger2
    implementation "com.google.dagger:dagger:$daggerVer"
    kapt "com.google.dagger:dagger-compiler:$daggerVer"
    kaptIntegrationTest "com.google.dagger:dagger-compiler:$daggerVer"

    // Testing
    testImplementation "junit:junit:$junitVer"
    testImplementation "org.mockito:mockito-core:$mockitoVer"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlinVer"
    testImplementation "org.testfx:testfx-core:$testFxVer"
    testImplementation "org.testfx:testfx-junit:$testFxVer"
    integrationTestCompile group: 'junit', name: 'junit', version: "$junitVer"
    integrationTestCompile "org.mockito:mockito-core:$mockitoVer"
    integrationTestImplementation sourceSets.main.compileClasspath
    integrationTestImplementation sourceSets.main.output

    //WA Libraries
    implementation project(':assets')
    implementation project(':common')
    implementation project(':common:audio')
    implementation project(':jvm:controls')
    implementation project(':jvm:device')
    implementation project(':jvm:utils')
    implementation project(':jvm:workbookplugin')
    implementation "org.wycliffeassociates:kotlin-resource-container:$kotlinresourcecontainerVer"
    implementation "org.wycliffeassociates:jdenticon-kotlin:$jdenticonKoltinVer"
    implementation "org.wycliffeassociates:usfmtools:$usfmToolsVer"

    // Atlassian commonmark (for rendering markdown)
    implementation "com.atlassian.commonmark:commonmark:$commonmarkVer"

    // jar loader
    implementation "org.clapper:javautil:$clapperJavaUtilVer"

    // Logging
    implementation "org.slf4j:slf4j-api:$slf4jApiVer"
    implementation "org.apache.logging.log4j:log4j-core:$log4j2Ver"
    implementation "org.apache.logging.log4j:log4j-slf4j18-impl:$log4j2Ver"

    // Sentry
    implementation "io.sentry:sentry:$sentryVer"
}

gluonfx {
    reflectionList = [
            'org.apache.logging.log4j.core.config.builder.impl.BuiltConfiguration',
            'org.apache.logging.log4j.message.DefaultFlowMessageFactory',
            'org.apache.logging.log4j.core.impl.Log4jContextFactory',
            'org.apache.logging.log4j.core.util.ExecutorServices',
            'org.apache.logging.log4j.message.ParameterizedMessageFactory',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.OtterApp',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.screens.RootView',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.viewmodel.RootViewModel',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.viewmodel.SettingsViewModel',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.viewmodel.AddFilesViewModel',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.viewmodel.AddPluginViewModel',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.viewmodel.AudioPluginViewModel',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.viewmodel.BookPageViewModel',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.viewmodel.BookWizardViewModel',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.viewmodel.ChapterPageViewModel',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.viewmodel.HomePageViewModel',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.viewmodel.LanguageSelectionViewModel',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.viewmodel.MainScreenViewModel',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.viewmodel.RecordableTabViewModel',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.viewmodel.RecordableViewModel',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.viewmodel.RecordResourceViewModel',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.viewmodel.RecordScriptureViewModel',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.viewmodel.RemovePluginsViewModel',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.viewmodel.ResourceListViewModel',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.viewmodel.RootViewModel',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.viewmodel.SettingsViewModel',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.viewmodel.SplashScreenViewModel',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.viewmodel.TranslationViewModel',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.viewmodel.WorkbookDataStore',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.viewmodel.WorkbookPageViewModel',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.NavigationMediator',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.OtterExceptionHandler',
            'tornadofx.Workspace',
            'tornadofx.WorkspaceArea',
            'tornadofx.UIComponent',
            'tornadofx.Stylesheet',
            'javafx.scene.control.Button',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.components.AppBar',
            'org.wycliffeassociates.otter.jvm.workbookapp.ui.OtterExceptionHandler',
            'org.wycliffeassociates.otter.jvm.controls.dialog.OtterDialog'
    ]
    compilerArgs = [
            '--allow-incomplete-classpath',
            '--enable-url-protocols=css'
    ]
    jniList = [
            '--enable-url-protocols=css'
    ]
    runtimeArgs = ['--enable-url-protocols=css']
}

run {
    jvmArgs = [
            '--add-exports=javafx.graphics/com.sun.javafx.util=ALL-UNNAMED',
            '--add-exports=javafx.graphics/com.sun.javafx.sg.prism=ALL-UNNAMED',
            '--add-exports=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED',
            '--add-exports=javafx.graphics/com.sun.javafx.util=ALL-UNNAMED',
            '--add-exports=javafx.base/com.sun.javafx.logging=ALL-UNNAMED',
            '--add-exports=javafx.graphics/com.sun.prism=ALL-UNNAMED',
            '--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED',
            '--add-exports=javafx.graphics/com.sun.javafx.geom.transform=ALL-UNNAMED',
            '--add-exports=javafx.graphics/com.sun.javafx.tk=ALL-UNNAMED',
            '--add-exports=javafx.graphics/com.sun.glass.utils=ALL-UNNAMED',
            '--add-exports=javafx.graphics/com.sun.javafx.font=ALL-UNNAMED',
            '--add-exports=javafx.graphics/com.sun.javafx.application=ALL-UNNAMED',
            '--add-exports=javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED',
            '--add-exports=javafx.controls/com.sun.javafx.scene.control.skin=ALL-UNNAMED',
            '--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=ALL-UNNAMED',
            '--add-exports=javafx.graphics/com.sun.javafx.scene.input=ALL-UNNAMED',
            '--add-exports=javafx.graphics/com.sun.javafx.geom=ALL-UNNAMED',
            '--add-exports=javafx.graphics/com.sun.prism.paint=ALL-UNNAMED',
            '--add-exports=javafx.graphics/com.sun.scenario.effect=ALL-UNNAMED',
            '--add-exports=javafx.graphics/com.sun.javafx.text=ALL-UNNAMED',
            '--add-exports=javafx.graphics/com.sun.javafx.geom=ALL-UNNAMED',
            '--add-exports=javafx.graphics/com.sun.javafx.scene.text=ALL-UNNAMED',
            '--add-opens=javafx.graphics/javafx.scene=ALL-UNNAMED',
            '--add-opens=javafx.graphics/javafx.scene.text=ALL-UNNAMED'
    ]
}


mainClassName = "org.wycliffeassociates.otter.jvm.workbookapp.MainKt"

// tell gradle what to put in the jar
shadowJar {
    archiveFileName = 'workbookapp.jar'
    mergeServiceFiles()
    manifest {
        attributes(
                'Main-Class': "org.wycliffeassociates.otter.jvm.workbookapp.MainKt"
        )
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

configure(integrationTest) {
    group = 'verification'
    description = 'Cross-package and e2e tests, may require DB'
}

//////////////////////////////////// Custom Tasks ///////////////////////////////////////////
task createVersionProperties(dependsOn: processResources) {
    doLast {
        if (project.hasProperty('gradlewCommandVersionProp')) {
            new File("$buildDir/resources/main/version.properties").withWriter { w ->
                Properties p = new Properties()
                p['version'] = gradlewCommandVersionProp
                p.store w, null
            }
        }
    }
}

task createGithubProperties(dependsOn: processResources) {
    doLast {
        if (project.hasProperty('githubRepoUrl') && project.hasProperty('githubOauthToken')) {
            new File("$buildDir/resources/main/github.properties").withWriter { w ->
                Properties p = new Properties()
                p['repo-url'] = githubRepoUrl
                p['oauth-token'] = githubOauthToken
                p.store w, null
            }
        }
    }
}

task createSentryProperties(dependsOn: processResources) {
    doLast {
        if (project.hasProperty('sentryDsn')) {
            new File("$buildDir/resources/main/sentry.properties").withWriter { w ->
                Properties p = new Properties()
                p['dsn'] = sentryDsn
                p.store w, null
            }
        }
    }
}

///////////Customize Gradle Test Output ////////////////////////////////
tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, " +
                        "${result.successfulTestCount} successes, " +
                        "${result.failedTestCount} failures, " +
                        "${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

idea {
    module {
        generatedSourceDirs += file('build/generated/source/kapt/integrationTest')
    }
}

compileJava.dependsOn ':jvm:recorderapp:copyJarToWorkbookAppResources'
compileJava.dependsOn ':jvm:markerapp:copyJarToWorkbookAppResources'
compileJava.dependsOn createVersionProperties
compileJava.dependsOn createGithubProperties
compileJava.dependsOn createSentryProperties
integrationTest.mustRunAfter test
integrationTest.dependsOn ':assets:build'
integrationTest.dependsOn ':assets:copyToResources'
install4jdeploy.dependsOn build
install4jdeploy.dependsOn integrationTest
